{
    "questions": [{
        "type": "multi",
        "id": 1,
        "question": "A linear collection of data elements where the linear node is given by means of pointer is called?",
        "img": "",
        "options": ["Linked list", " Node list", "Primitive list", "None of the mentioned"],
        "answer": "Linked list",
        "code": ""
    }, {
        "type": "multi",
        "id": 2,
        "question": "In linked list each node contain minimum of two fields. One field is data field to store the data second field is?",
        "img": "",
        "options": ["Pointer to character", "Pointer to iteger", "Pointer to node", "Node"],
        "answer": "Pointer to node",
        "code": ""
    }, {
        "type": "multi",
        "id": 3,
        "question": "Linked list data structure offers considerable saving in",
        "img": "",
        "options": ["Computational Time", "Space Utilization", "Space Utilization and Computational Time", " None of the mentioned"],
        "answer": "Space Utilization and Computational Time",
        "code": ""
    }, {
        "type": "multi",
        "id": 4,
        "question": "What is the output of following function for start pointing to first node of following linked list?",
        "img": "",
        "options": ["1 4 6 6 4 1", "1 3 5 1 3 5", "1 2 3 5", "1 3 5 5 3 1"],
        "answer": "1 3 5 5 3 1",
        "code": "1->2->3->4->5->6\r\nvoid fun(struct node* start)\r\n{\r\n    if(start == NULL)\r\n    return;\r\n    printf(\"%d  \", start->data); \r\n    if(start->next != NULL )\r\n    fun(start->next->next);\r\n    printf(\"%d  \", start->data);\r\n}"
    }, {
        "type": "multi",
        "id": 5,
        "question": "Process of inserting an element in stack is called ____________",
        "img": "",
        "options": ["Create", "Push", "Evaluation", "Pop"],
        "answer": "Push",
        "code": ""
    }, {
        "type": "multi",
        "id": 6,
        "question": "Process of removing an element from stack is called __________",
        "img": "",
        "options": ["Create", "Push", "Evaluation", "Pop"],
        "answer": "Pop",
        "code": ""
    }, {
        "type": "multi",
        "id": 7,
        "question": "Pushing an element into stack already having five elements and stack size of 5 , then stack becomes",
        "img": "",
        "options": ["Overflow", "Crash", "Underflow", "User flow"],
        "answer": "Overflow",
        "code": ""
    }, {
        "type": "multi",
        "id": 8,
        "question": "Consider the following operation performed on a stack of size 5.After the completion of all operation, the number of elements present in stack are",
        "img": "",
        "options": ["1", "2", "3", "4"],
        "answer": "1",
        "code": "Push(1);\r\nPop();\r\nPush(2);\r\nPush(3);\r\nPop();\r\nPush(4);\r\nPop();\r\nPop();\r\nPush(5);"
    }, {
        "type": "multi",
        "id": 9,
        "question": "You have two jars, one jar which has 10 rings and the other has none. They are placed one above the other. You want to remove the last ring in the jar. And the second jar is weak and cannot be used to store rings for a long time.",
        "img": "",
        "options": ["Empty the first jar by removing it one by one from the first jar and placing it into the second jar", "Empty the first jar by removing it one by one from the first jar and placing it into the second jar and empty the second jar by placing all the rings into the first jar one by one ", "There exists no possible way to do this ", "Break the jar and remove the last one "],
        "answer": "Empty the first jar by removing it one by one from the first jar and placing it into the second jar and empty the second jar by placing all the rings into the first jar one by one",
        "code": ""
    }, {
        "type": "multi",
        "id": 10,
        "question": "A data structure in which elements can be inserted or deleted at/from both the ends but not in the middle is?",
        "img": "",
        "options": ["Queue", "Circular queue", "Dequeue", "Priority queue"],
        "answer": "Dequeue",
        "code": ""
    }, {
        "type": "multi",
        "id": 11,
        "question": "The data structure required for BFS on a graph is ? ",
        "img": "",
        "options": ["Stack", "Queue", "Linked list", "None of the above"],
        "answer": "Queue",
        "code": ""
    }]

}
